#!/usr/bin/env python3
"""
Main entry point for the Robotic Dog Controller
Run this script to start the robotic dog system
"""
import asyncio
import signal
import sys
import os

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from robotic_dog.core import RoboticDogController
from robotic_dog.config import HTTP_PORT, WEBSOCKET_PORT


class RoboticDogApp:
    def __init__(self):
        self.controller = RoboticDogController()
        self.running = False
    
    async def start(self):
        """Start the robotic dog application"""
        print("üêï Starting Robotic Dog Application...")
        print("=" * 50)
        
        # Set up signal handlers for graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # Initialize the controller
            success = await self.controller.initialize()
            
            if not success:
                print("‚ùå Failed to initialize robotic dog controller")
                return False
            
            # Start HTTP server in background
            self.controller.start_http_server()
            
            # Print access information
            print("\nüåê Access Information:")
            print(f"üì± Web Control Panel: http://localhost:{HTTP_PORT}")
            print(f"üîå WebSocket Server: ws://localhost:{WEBSOCKET_PORT}")
            print("\nüìã Available Voice Commands:")
            print("  ‚Ä¢ 'move forward/backward/left/right'")
            print("  ‚Ä¢ 'stop'")
            print("  ‚Ä¢ 'take photo'")
            print("  ‚Ä¢ 'where am i'")
            print("  ‚Ä¢ 'analyze scene'")
            print("  ‚Ä¢ 'status'")
            
            print("\nüéÆ Control Methods:")
            print("  1. Web browser control panel")
            print("  2. Voice commands (if microphone available)")
            print("  3. WebSocket API for custom clients")
            print("  4. Tablet app integration")
            print("  5. NodeMCU remote control")
            
            print("\n‚úÖ Robotic Dog is ready!")
            print("Press Ctrl+C to shutdown gracefully")
            print("=" * 50)
            
            self.running = True
            
            # Keep the application running
            while self.running:
                await asyncio.sleep(1)
                
        except Exception as e:
            print(f"‚ùå Error starting application: {e}")
            return False
        
        return True
    
    def signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        print(f"\nüõë Received signal {signum}, shutting down...")
        self.running = False
        
        # Create shutdown task
        asyncio.create_task(self.shutdown())
    
    async def shutdown(self):
        """Shutdown the application"""
        print("üîÑ Shutting down robotic dog...")
        await self.controller.shutdown()
        self.running = False
        print("üëã Goodbye!")


async def main():
    """Main application function"""
    app = RoboticDogApp()
    await app.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Application interrupted by user")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
    finally:
        print("üèÅ Application ended")