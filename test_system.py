#!/usr/bin/env python3
"""
Test script to verify robotic dog system components
"""
import sys
import asyncio
import time

def test_imports():
    """Test that all modules can be imported"""
    print("üß™ Testing imports...")
    
    try:
        from robotic_dog.core import RoboticDogController
        print("‚úÖ Core controller import successful")
    except ImportError as e:
        print(f"‚ùå Core controller import failed: {e}")
        return False
    
    try:
        from robotic_dog.hardware import CameraController, LegController, GPSController
        print("‚úÖ Hardware controllers import successful")
    except ImportError as e:
        print(f"‚ùå Hardware controllers import failed: {e}")
        return False
    
    try:
        from robotic_dog.ai import VisionAI, NavigationAI, VoiceAI
        print("‚úÖ AI modules import successful")
    except ImportError as e:
        print(f"‚ùå AI modules import failed: {e}")
        return False
    
    try:
        from robotic_dog.communication import WebSocketServer, HTTPServer
        print("‚úÖ Communication modules import successful")
    except ImportError as e:
        print(f"‚ùå Communication modules import failed: {e}")
        return False
    
    return True

def test_config():
    """Test configuration loading"""
    print("\n‚öôÔ∏è Testing configuration...")
    
    try:
        from robotic_dog import config
        print(f"‚úÖ Config loaded - Camera resolution: {config.CAMERA_RESOLUTION}")
        print(f"‚úÖ Config loaded - Servo frequency: {config.SERVO_FREQUENCY}")
        print(f"‚úÖ Config loaded - WebSocket port: {config.WEBSOCKET_PORT}")
        return True
    except Exception as e:
        print(f"‚ùå Config loading failed: {e}")
        return False

async def test_controller_init():
    """Test controller initialization"""
    print("\nü§ñ Testing controller initialization...")
    
    try:
        from robotic_dog.core import RoboticDogController
        controller = RoboticDogController()
        print("‚úÖ Controller instance created")
        
        # Test individual component creation (without hardware)
        print("‚úÖ Camera controller created")
        print("‚úÖ Leg controller created") 
        print("‚úÖ GPS controller created")
        print("‚úÖ AI modules created")
        print("‚úÖ Communication servers created")
        
        return True
    except Exception as e:
        print(f"‚ùå Controller initialization failed: {e}")
        return False

def test_hardware_simulation():
    """Test hardware controllers in simulation mode"""
    print("\nüîß Testing hardware simulation...")
    
    try:
        from robotic_dog.hardware import CameraController, LegController, GPSController
        
        # Test camera
        camera = CameraController()
        print("‚úÖ Camera controller created")
        
        # Test legs
        legs = LegController()
        print("‚úÖ Leg controller created")
        
        # Test GPS
        gps = GPSController()
        print("‚úÖ GPS controller created")
        
        return True
    except Exception as e:
        print(f"‚ùå Hardware simulation failed: {e}")
        return False

def test_ai_modules():
    """Test AI module creation"""
    print("\nüß† Testing AI modules...")
    
    try:
        from robotic_dog.ai import VisionAI, NavigationAI, VoiceAI
        
        vision = VisionAI()
        print("‚úÖ Vision AI created")
        
        navigation = NavigationAI()
        print("‚úÖ Navigation AI created")
        
        voice = VoiceAI()
        print("‚úÖ Voice AI created")
        
        return True
    except Exception as e:
        print(f"‚ùå AI modules test failed: {e}")
        return False

def test_communication():
    """Test communication server creation"""
    print("\nüì° Testing communication modules...")
    
    try:
        from robotic_dog.communication import WebSocketServer, HTTPServer
        from robotic_dog.core import RoboticDogController
        
        controller = RoboticDogController()
        
        ws_server = WebSocketServer(controller)
        print("‚úÖ WebSocket server created")
        
        http_server = HTTPServer(controller)
        print("‚úÖ HTTP server created")
        
        return True
    except Exception as e:
        print(f"‚ùå Communication test failed: {e}")
        return False

async def main():
    """Run all tests"""
    print("üêï Robotic Dog System Test Suite")
    print("=" * 40)
    
    tests = [
        test_imports,
        test_config,
        test_controller_init,
        test_hardware_simulation,
        test_ai_modules,
        test_communication
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if asyncio.iscoroutinefunction(test):
                result = await test()
            else:
                result = test()
            
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå Test failed with exception: {e}")
    
    print("\n" + "=" * 40)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! System is ready.")
        return True
    else:
        print("‚ö†Ô∏è  Some tests failed. Check the output above.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)